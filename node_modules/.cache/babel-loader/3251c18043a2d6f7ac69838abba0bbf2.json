{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport API from '../API'; //Helpers\n\nimport { isPersistedState } from \"../helpers\";\nexport const useMovieFetch = movieId => {\n  _s();\n\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n        const movie = await API.fetchMovie(movieId);\n        const credits = await API.fetchCredits(movieId); //Get directors only\n\n        const directors = credits.crew.filter(member => member.job === 'Director');\n        setState({ ...movie,\n          actors: credits.cast,\n          directors\n        });\n        setLoading(false);\n      } catch (error) {\n        setError(true);\n      }\n    };\n\n    const sessionState = isPersistedState(movieId);\n    fetchMovie();\n  }, [movieId]);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useMovieFetch, \"H9fMDtHieNoIS0cJiyLVriXyWm0=\");","map":{"version":3,"sources":["C:/Users/gaura/OneDrive/Desktop/react_crash_course/prime_moviedb/src/hooks/useMovieFetch.js"],"names":["useState","useEffect","API","isPersistedState","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchMovie","movie","credits","fetchCredits","directors","crew","filter","member","job","actors","cast","sessionState"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,GAAP,MAAgB,QAAhB,C,CAEA;;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAO,MAAMC,aAAa,GAAGC,OAAO,IAAG;AAAA;;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,UAAU,GAAG,YAAY;AAC3B,UAAG;AACCH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACA,cAAME,KAAK,GAAG,MAAMX,GAAG,CAACU,UAAJ,CAAeP,OAAf,CAApB;AACA,cAAMS,OAAO,GAAG,MAAMZ,GAAG,CAACa,YAAJ,CAAiBV,OAAjB,CAAtB,CAJD,CAKC;;AACA,cAAMW,SAAS,GAAGF,OAAO,CAACG,IAAR,CAAaC,MAAb,CACdC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UADX,CAAlB;AAIAb,QAAAA,QAAQ,CAAC,EACL,GAAGM,KADE;AAELQ,UAAAA,MAAM,EAAEP,OAAO,CAACQ,IAFX;AAGLN,UAAAA;AAHK,SAAD,CAAR;AAMAP,QAAAA,UAAU,CAAC,KAAD,CAAV;AAEH,OAlBD,CAkBC,OAAMC,KAAN,EAAY;AACTC,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,KAtBD;;AAuBA,UAAMY,YAAY,GAAGpB,gBAAgB,CAACE,OAAD,CAArC;AAEAO,IAAAA,UAAU;AACb,GA3BQ,EA2BN,CAACP,OAAD,CA3BM,CAAT;AA6BA,SAAO;AAACC,IAAAA,KAAD;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AACH,CAnCM;;GAAMN,a","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport API from '../API';\r\n\r\n//Helpers\r\nimport { isPersistedState } from \"../helpers\";\r\n\r\nexport const useMovieFetch = movieId =>{\r\n    const [state, setState] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchMovie = async () => {\r\n            try{\r\n                setLoading(true);\r\n                setError(false);\r\n                const movie = await API.fetchMovie(movieId);\r\n                const credits = await API.fetchCredits(movieId);\r\n                //Get directors only\r\n                const directors = credits.crew.filter(\r\n                    member => member.job === 'Director'\r\n                );\r\n\r\n                setState({\r\n                    ...movie,\r\n                    actors: credits.cast,\r\n                    directors\r\n                });\r\n\r\n                setLoading(false);\r\n\r\n            }catch(error){\r\n                setError(true);\r\n            }\r\n        };\r\n        const sessionState = isPersistedState(movieId); \r\n\r\n        fetchMovie();\r\n    }, [movieId]);\r\n\r\n    return {state, loading, error};\r\n}"]},"metadata":{},"sourceType":"module"}